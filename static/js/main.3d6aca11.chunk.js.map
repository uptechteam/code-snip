{"version":3,"sources":["uptech_logo.svg","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","App","useState","output","setOutput","rawInput","setRawInput","className","href","src","logo","alt","wrap","value","onChange","event","target","onClick","processCode","readOnly","input","splittedInput","split","joinedCodeLines","map","line","index","isLastLine","length","wrapLineInHtml","join","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,yC,gLC+C5BC,G,MA3CH,WAAO,IAAD,EACYC,mBAAiB,IAD7B,mBACTC,EADS,KACDC,EADC,OAEgBF,mBAAiB,IAFjC,mBAETG,EAFS,KAECC,EAFD,KAahB,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,UAChB,uBAAGC,KAAK,uBACN,yBAAKC,IAAKC,IAAMC,IAAI,WAGxB,yBAAKJ,UAAU,aACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,SACb,wBAAIA,UAAU,eAAd,SACA,8BACEK,KAAK,MACLC,MAAOR,EACPS,SAxBkB,SAC5BC,GAEAT,EAAYS,EAAMC,OAAOH,WAwBnB,yBAAKN,UAAU,iBAAiBU,QArBb,WACzBb,EAAUc,EAAYb,MAqBd,0CAEF,yBAAKE,UAAU,SACb,wBAAIA,UAAU,eAAd,kBACA,8BAAUY,UAAU,EAAMN,MAAOV,UAgCvCe,EAAc,SAACE,GACnB,IAAMC,EAAgBD,EAAME,MAAM,MAK5BC,EAJYF,EAAcG,KAAI,SAACC,EAAMC,GACzC,IAAIC,EAAaD,IAAUL,EAAcO,OAAS,EAClD,OAAOC,EAAeJ,EAAME,MAEIG,KAAK,KAEvC,MAAM,GAAN,OA9BU,6dA8BV,oDAGIP,EAHJ,wBAQIM,EAAiB,SAACJ,EAAcE,GACpC,MAAM,4BAAN,OAAmCF,GAAnC,OAA0CE,EAAa,GAAK,SAA5D,YC5EkBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3d6aca11.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/uptech_logo.0c315dc9.svg\";","import React, { useState } from \"react\";\nimport logo from \"./uptech_logo.svg\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [output, setOutput] = useState<string>(\"\");\n  const [rawInput, setRawInput] = useState<string>(\"\");\n  const handleLeftPanelChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    setRawInput(event.target.value);\n  };\n\n  const handleProcessClick = () => {\n    setOutput(processCode(rawInput));\n  };\n\n  return (\n    <div className=\"app\">\n      <header className=\"header\">\n        <a href=\"https://uptech.team\">\n          <img src={logo} alt=\"Logo\" />\n        </a>\n      </header>\n      <div className=\"container\">\n        <div className=\"panels-container\">\n          <div className=\"panel\">\n            <h3 className=\"panel-title\">Input</h3>\n            <textarea\n              wrap=\"off\"\n              value={rawInput}\n              onChange={handleLeftPanelChange}\n            />\n          </div>\n          <div className=\"process-button\" onClick={handleProcessClick}>\n            <span>Process</span>\n          </div>\n          <div className=\"panel\">\n            <h3 className=\"panel-title\">Generated HTML</h3>\n            <textarea readOnly={true} value={output} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\nconst styles = `\\\n<style>\n  .c01928312 {\n    padding: 20px;\n    background-color: rgb(242, 242, 242);\n    text-transform: none;\n  }\n  .tc81203823 {\n    font-family: Menlo, Monaco, “Courier New”, Courier, monospace;\n    font-size: 16px;\n    font-weight: 400;\n    font-style: normal;\n    color: rgba(41, 41, 41, 1);\n    letter-spacing: -0.022em;\n    margin-top: -0.09em;\n    margin-bottom: -0.09em;\n    white-space: pre-wrap;\n    word-break: break-word;\n  }\n</style>\\\n`;\n\nconst processCode = (input: string) => {\n  const splittedInput = input.split(\"\\n\");\n  const codeLines = splittedInput.map((line, index) => {\n    let isLastLine = index === splittedInput.length - 1;\n    return wrapLineInHtml(line, isLastLine);\n  });\n  const joinedCodeLines = codeLines.join(\" \");\n\n  return `${styles}\n<code>\n  <div class=\"c01928312\">\n    ${joinedCodeLines}\n  </div>\n</code>`;\n};\n\nconst wrapLineInHtml = (line: string, isLastLine: boolean) => {\n  return `<span class=\"tc81203823\">${line}${isLastLine ? \"\" : \"<br />\"}</span>`;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}